# This is a basic workflow to help you get started with Actions
name: Tag deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter version (vX.X.X)'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow --tags
          git checkout ${{ github.event.inputs.version }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v2
        id: node-modules
        env:
          cache-name: cache-node-modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        # skip installing dependencies if cache is ok
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Build
        run: npm run build

      - name: Deploy
        uses: reggionick/s3-deploy@v3
        with:
          folder: build
          bucket: ${{ secrets.S3_BUCKET_PROD }}
          bucket-region: ${{ secrets.S3_BUCKET_REGION_PROD }}
          invalidation: /
          delete-removed: true
          no-cache: true
          private: true

#       - name: Deploy to S3
#         uses: jakejarvis/s3-sync-action@master
#         continue-on-error: true
#         with:
#           args: --acl public-read --delete
#         env:
#           AWS_S3_BUCKET: ${{ secrets.AWS_STAGING_BUCKET_NAME }}
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ${{ secrets.AWS_REGION }}
#           SOURCE_DIR: "build"
